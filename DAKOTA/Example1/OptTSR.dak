# Runs local surrogate based optimization on CACTUS. The local surrogate is fit to the CACTUS cost function using "global" sampling within a trust
# region defined for the surrogate function. This keeps the method from having to use the slightly noisy CACTUS results in gradient calculations. 
# This method is faster (especially when using async parallel CACTUS evalutations in the fitting of the surrogate function) and more robust than 
# direct gradient optimization on CACTUS output.
# Note: Apparently, surrogate optimization methods can only minimize a cost function (their trust region method fails for maximization)...

strategy
	single_method
	tabular_graphics_data
	  tabular_graphics_file = 'Opt_Data_Out.dat'
	method_pointer = 'SBLO'

method
	id_method = 'SBLO'
	surrogate_based_local
	max_iterations = 50
    convergence_tolerance = 1e-02
	soft_convergence_limit = 3 # terminate after this number of surrogate model iterations with improvement less than tolerance
	trust_region
	  initial_size = 0.5
	  minimum_size = 1.0e-2
	output silent
	# Surrogate model and minimization method pointers
	model_pointer = 'SURROGATE'
	approx_method_pointer = 'NLP'

method
	id_method = 'NLP'
    output silent
	dot_bfgs
	  max_iterations = 50
	  convergence_tolerance = 1e-8

model
	id_model = 'SURROGATE'
	surrogate 
      global # Surrogate fit with "global" sampling within trust region
	  # Surrogate function
	  #polynomial quadratic # simple
	  gaussian_process surfpack # kriging
	  # Total samples to take in fitting the surrogate
	  total_points = 5 # oversample (more than recommended point count) to smooth noisy cost function output
 	  #recommended_points
	  reuse_samples region # reuse samples that are still in the current trust region
	  # Sampling method and responses pointers   	
	  responses_pointer = 'SURROGATE_RESP'
	  dace_method_pointer = 'SAMPLING' 
	  # Surrogate model fit diagnostics
	  #diagnostics	 				

variables
 	continuous_design = 1
  	  initial_point = 6
  	  lower_bounds = 2 
  	  upper_bounds = 10
  	  descriptors = 'Ut'
    continuous_state = 1
  	  initial_state = 52
  	  descriptors = 'RPM'

responses
	id_responses = 'SURROGATE_RESP'
	num_objective_functions = 1
	# Must apply CACTUS descriptors to the surrogate responses as well as the true responses as these descriptors
	# somehow propagate to, and overwrite, the true response descriptors in the input files passed to the analysis driver (probably a bug)...
    descriptors = 'CostFunc_MaxCP' 
  	numerical_gradients			
  	  method_source dakota			
  	  interval_type central			
 	  fd_gradient_step_size = 1.e-6		
	no_hessians

method
	id_method = 'SAMPLING'
	model_pointer = 'TRUTH'
	dace lhs
	  seed = 1000
	  # Set samples to minimum number of new truth model samples to be added to the 
      # surrogate model basis on each surrogate model iteration. Do a couple per dimension
	  # to hedge against directional bias potentially introduced by reusing samples...		
	  samples = 2   

model
	id_model = 'TRUTH'
	single
	  interface_pointer = 'TRUE_FN'
	  responses_pointer = 'TRUE_RESP'

interface
	id_interface = 'TRUE_FN'
 	analysis_drivers = '../Driver/CACTUS_Driver.py'
  	  analysis_components = '/home/jmurray/Project/CACTUS/stable/cactus' 'TestVAWTNom.in' 'N'
  	  fork
   	  parameters_file = 'Inputs.in'
   	  results_file = 'Outputs.out'
	  # need to tag files for async calculation
   	  file_tag
 	asynchronous
  	  evaluation_concurrency = 10

responses
	id_responses = 'TRUE_RESP'
	num_objective_functions = 1
 	descriptors = 'CostFunc_MaxCP'
	no_gradients		
	no_hessians		

